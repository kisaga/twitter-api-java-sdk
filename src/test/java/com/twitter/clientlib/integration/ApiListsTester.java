/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.integration;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.*;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;


@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ApiListsTester extends ApiTester {

  private final String listId = "84839422";
  private final String listIdNotFound = "11111112";
  private final String listOwnerUserId = "2244994945";
  private final Set<String> listFields = new HashSet<>(
      Arrays.asList("owner_id", "follower_count", "created_at", "description"));
  private final Set<String> listsExpansions = new HashSet<>(Collections.singletonList("owner_id"));
  private final Set<String> expansionsPinnedTweetId = new HashSet<>(
      Collections.singletonList("pinned_tweet_id"));

  public ListCreateResponse listIdCreate() throws ApiException {
    ListCreateRequest request = new ListCreateRequest();
    request.setName("MyList");
    request.setPrivate(true);
    request.setDescription("MyList description");
    return apiInstance.lists().listIdCreate()
        .listCreateRequest(request)
        .execute();
  }

  private ListDeleteResponse deleteList(String id) throws ApiException {
    return apiInstance.lists().listIdDelete(id)
        .execute();
  }

  @BeforeAll
  public void init() {
    initApiInstance();
  }

  @Test
  public void listIdGetTest() throws ApiException {
    Get2ListsIdResponse result = apiInstance.lists().listIdGet(listId)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(false, result.getErrors());
    checkListData(result.getData());
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
    checkUserData(result.getIncludes().getUsers().get(0));
  }

  @Test
  public void listIdGetListNotFoundTest() throws ApiException {
    Get2ListsIdResponse result = apiInstance.lists().listIdGet(listIdNotFound)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(true, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    checkResourceNotFoundProblem(result.getErrors().get(0), listIdNotFound, "Not Found Error",
        "id");
  }

  @Test
  public void listUserOwnedListsTest() throws ApiException {
    Get2UsersIdOwnedListsResponse result = apiInstance.lists().listUserOwnedLists(listOwnerUserId)
        .maxResults(maxResults)
        .paginationToken(null)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkListData(result.getData().get(0));
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
    checkUserData(result.getIncludes().getUsers().get(0));
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getResultCount() > 0);
  }

  @Test
  public void listUserOwnedListsListNotFoundTest() throws ApiException {
    Get2UsersIdOwnedListsResponse result = apiInstance.lists().listUserOwnedLists(userNotExists)
        .maxResults(maxResults)
        .paginationToken(null)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(true, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    assertNull(result.getMeta());
    checkResourceNotFoundProblem(result.getErrors().get(0), userNotExists, "Not Found Error", "id");
  }

  @Test
  public void listIdCreateTest() throws ApiException {
    ListCreateResponse result = null;
    try {
      result = listIdCreate();
      checkErrors(false, result.getErrors());
      assertNotNull(result.getData());
      assertNotNull(result.getData().getId());
      assertNotNull(result.getData().getName());
    } finally {
      if (result != null) {
        deleteList(result.getData().getId());
      }
    }
  }

  @Test
  public void listIdCreateEmptyValuesTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.lists().listIdCreate()
          .listCreateRequest(null)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `name` field in the request body can not be empty",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void listIdUpdateTest() throws ApiException {
    ListCreateResponse list = null;
    try {
      list = listIdCreate();
      ListUpdateRequest request = new ListUpdateRequest();
      request.setName("MyNewList Updated");
      request.setDescription("updated description");
      ListUpdateResponse result = apiInstance.lists().listIdUpdate(list.getData().getId())
          .listUpdateRequest(request)
          .execute();
      checkErrors(false, result.getErrors());
      assertNotNull(result.getData());
      assertTrue(result.getData().getUpdated());
    } finally {
      if (list != null) {
        deleteList(list.getData().getId());
      }
    }
  }

  @Test
  public void listIdUpdateListNotFoundTest() throws ApiException {
    ListUpdateRequest request = new ListUpdateRequest();
    request.setName("MyNewList Updated");
    request.setDescription("updated description");
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.lists().listIdUpdate(listIdNotFound)
          .listUpdateRequest(request)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "You cannot update a List that does not exist.",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void listIdUpdateNullValuesTest() throws ApiException {
    ListCreateResponse list = null;
    try {
      list = listIdCreate();
      ListUpdateResponse result = apiInstance.lists().listIdUpdate(list.getData().getId())
          .listUpdateRequest(null)
          .execute();
      checkErrors(false, result.getErrors());
      assertNotNull(result.getData());
      assertTrue(result.getData().getUpdated());
    } finally {
      if (list != null) {
        deleteList(list.getData().getId());
      }
    }
  }

  @Test
  public void listIdUpdateListNullTest() throws ApiException {
    ListCreateResponse list = null;
    try {
      list = listIdCreate();
      ListUpdateResponse result = apiInstance.lists().listIdUpdate(list.getData().getId())
          .listUpdateRequest(null)
          .execute();
      checkErrors(false, result.getErrors());
      assertNotNull(result.getData());
      assertTrue(result.getData().getUpdated());
    } finally {
      if (list != null) {
        deleteList(list.getData().getId());
      }
    }
  }

  @Test
  public void listIdDeleteTest() throws ApiException {
    ListCreateResponse list = listIdCreate();
    ListDeleteResponse result = deleteList(list.getData().getId());
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertTrue(result.getData().getDeleted());
  }

  @Test
  public void listIdDeleteListNotFoundTest() throws ApiException {
    ListDeleteResponse result = deleteList(listIdNotFound);
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertTrue(result.getData().getDeleted());
  }

  @Test
  public void listIdDeleteListNotMineTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      deleteList(listId);
    });
    checkGenericProblem(exception.getErrorObject().getProblem(),
        "You are not allowed to delete this List.", "Forbidden",
        403);
  }

  @Test
  public void listsIdTweetsTest() throws ApiException {
    Get2ListsIdTweetsResponse result = apiInstance.tweets().listsIdTweets(listId)
        .maxResults(maxResults)
        .paginationToken(null)
        .tweetFields(tweetFields)
        .expansions(expansions)
        .mediaFields(null)
        .pollFields(null)
        .userFields(userFields)
        .placeFields(null)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkTweetData(result.getData().get(0));
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
    checkUserData(result.getIncludes().getUsers().get(0));
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getResultCount() > 0);
  }

  @Test
  public void listsIdTweetsListNotFoundTest() throws ApiException {
    Get2ListsIdTweetsResponse result = apiInstance.tweets().listsIdTweets(listIdNotFound)
        .maxResults(maxResults)
        .paginationToken(null)
        .tweetFields(tweetFields)
        .expansions(expansions)
        .mediaFields(null)
        .pollFields(null)
        .userFields(userFields)
        .placeFields(null)
        .execute();
    checkErrors(true, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    assertNull(result.getMeta());
    checkResourceNotFoundProblem(result.getErrors().get(0), listIdNotFound, "Not Found Error",
        "id");
  }

  @Test
  public void listAddMemberTest() throws ApiException {
    ListCreateResponse list = null;
    try {
      list = listIdCreate();
      ListAddUserRequest request = new ListAddUserRequest();
      request.setUserId(userId);
      ListMutateResponse result = apiInstance.lists().listAddMember(list.getData().getId())
          .listAddUserRequest(request)
          .execute();
      checkErrors(false, result.getErrors());
      assertNotNull(result.getData());
      assertTrue(result.getData().getIsMember());
    } finally {
      if (list != null) {
        deleteList(list.getData().getId());
      }
    }
  }

  @Test
  public void listAddMemberMemberNotFoundTest() throws ApiException {
    ListCreateResponse list = null;
    try {
      list = listIdCreate();
      String id = list.getData().getId();
      ListAddUserRequest request = new ListAddUserRequest();
      request.setUserId(userNotExists);
      ApiException exception = assertThrows(ApiException.class, () -> {
        apiInstance.lists().listAddMember(id)
            .listAddUserRequest(request)
            .execute();
      });
      checkApiExceptionProblem(exception, InvalidRequestProblem.class,
          "You cannot add a member that does not exist.",
          "Invalid Request", "One or more parameters to your request was invalid.");
    } finally {
      if (list != null) {
        deleteList(list.getData().getId());
      }
    }
  }

  @Test
  public void listRemoveMemberTest() throws ApiException {
    ListCreateResponse list = null;
    try {
      list = listIdCreate();
      ListAddUserRequest addRrequest = new ListAddUserRequest();
      addRrequest.setUserId(userId);
      apiInstance.lists().listAddMember(list.getData().getId())
          .listAddUserRequest(addRrequest)
          .execute();
      ListMutateResponse result = apiInstance.lists().listRemoveMember(list.getData().getId(),
              userId)
          .execute();
      checkErrors(false, result.getErrors());
      assertNotNull(result.getData());
      assertFalse(result.getData().getIsMember());
    } finally {
      if (list != null) {
        deleteList(list.getData().getId());
      }
    }
  }

  @Test
  public void listRemoveMemberMemberNotFoundTest() throws ApiException {
    ListCreateResponse list = null;
    try {
      list = listIdCreate();
      ListAddUserRequest addRrequest = new ListAddUserRequest();
      addRrequest.setUserId(userId);
      apiInstance.lists().listAddMember(list.getData().getId())
          .listAddUserRequest(addRrequest)
          .execute();
      ListMutateResponse result = apiInstance.lists().listRemoveMember(list.getData().getId(),
              userNotExists)
          .execute();
      checkErrors(false, result.getErrors());
      assertNotNull(result.getData());
      assertFalse(result.getData().getIsMember());
    } finally {
      if (list != null) {
        deleteList(list.getData().getId());
      }
    }
  }

  @Test
  public void listGetMembersTest() throws ApiException {
    Get2ListsIdMembersResponse result = apiInstance.users().listGetMembers(listId)
        .maxResults(maxResults)
        .paginationToken(null)
        .userFields(userFields)
        .expansions(expansionsPinnedTweetId)
        .tweetFields(tweetFields)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkUserData(result.getData().get(0));
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getTweets());
    checkTweetData(result.getIncludes().getTweets().get(0));
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getResultCount() > 0);
  }

  @Test
  public void listGetMembersListNotFoundTest() throws ApiException {
    Get2ListsIdMembersResponse result = apiInstance.users().listGetMembers(listIdNotFound)
        .maxResults(maxResults)
        .paginationToken(null)
        .userFields(userFields)
        .expansions(expansionsPinnedTweetId)
        .tweetFields(tweetFields)
        .execute();
    checkErrors(true, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    assertNull(result.getMeta());
    checkResourceNotFoundProblem(result.getErrors().get(0), listIdNotFound, "Not Found Error",
        "id");
  }

  @Test
  public void getUserListMembershipsTest() throws ApiException {
    Get2UsersIdListMembershipsResponse result = apiInstance.lists().getUserListMemberships(
            listOwnerUserId)
        .maxResults(maxResults)
        .paginationToken(null)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkListData(result.getData().get(0));
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
    checkUserData(result.getIncludes().getUsers().get(0));
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getResultCount() > 0);
  }

  @Test
  public void getUserListMembershipsListNotFoundTest() throws ApiException {
    Get2UsersIdListMembershipsResponse result = apiInstance.lists().getUserListMemberships(
            userNotExists)
        .maxResults(maxResults)
        .paginationToken(null)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(true, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    assertNull(result.getMeta());
    checkResourceNotFoundProblem(result.getErrors().get(0), userNotExists, "Not Found Error", "id");
  }

  @Test
  public void usersIdFollowersTest() throws ApiException {
    Get2UsersIdFollowersResponse result = apiInstance.users().usersIdFollowers(popularUserId)
        .maxResults(maxResults)
        .paginationToken(null)
        .userFields(null)
        .expansions(null)
        .tweetFields(null)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkUserData(result.getData().get(0));
    assertNull(result.getIncludes());
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getResultCount() > 0);
  }

  @Test
  public void usersIdFollowersUserNotExistsTest() throws ApiException {
    Get2UsersIdFollowersResponse result = apiInstance.users().usersIdFollowers(userNotExists)
        .maxResults(maxResults)
        .paginationToken(null)
        .userFields(null)
        .expansions(null)
        .tweetFields(null)
        .execute();
    checkErrors(true, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    assertNull(result.getMeta());
    checkResourceNotFoundProblem(result.getErrors().get(0), userNotExists, "Not Found Error", "id");
  }

  @Test
  public void userFollowedListsTest() throws ApiException {
    Get2UsersIdFollowedListsResponse result = apiInstance.lists().userFollowedLists(popularUserId)
        .maxResults(maxResults)
        .paginationToken(null)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkListData(result.getData().get(0));
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
    checkUserData(result.getIncludes().getUsers().get(0));
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getResultCount() > 0);
  }

  @Test
  public void userFollowedListsUserNotFoundTest() throws ApiException {
    Get2UsersIdFollowedListsResponse result = apiInstance.lists().userFollowedLists(userNotExists)
        .maxResults(maxResults)
        .paginationToken(null)
        .listFields(listFields)
        .expansions(listsExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(true, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    assertNull(result.getMeta());
    checkResourceNotFoundProblem(result.getErrors().get(0), userNotExists, "Not Found Error", "id");
  }

  @Test
  public void listUserFollowTest() throws ApiException {
    ListFollowedRequest request = new ListFollowedRequest();
    request.setListId(listId);
    ListFollowedResponse result = apiInstance.lists().listUserFollow(userId)
        .listFollowedRequest(request)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertTrue(result.getData().getFollowing());
  }

  @Test
  public void listUserFollowListNotFoundTest() throws ApiException {
    ListFollowedRequest request = new ListFollowedRequest();
    request.setListId(listIdNotFound);
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.lists().listUserFollow(userId)
          .listFollowedRequest(request)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "You cannot follow a List that does not exist.",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void listUserFollowUserNotExistsTest() throws ApiException {
    ListFollowedRequest request = new ListFollowedRequest();
    request.setListId(listId);
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.lists().listUserFollow(userNotExists)
          .listFollowedRequest(request)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + userNotExists + "] must be the same as the authenticating user",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void listUserPinTest() throws ApiException {
    ListPinnedRequest request = new ListPinnedRequest();
    request.setListId(listId);
    ListPinnedResponse result = apiInstance.lists().listUserPin(request, userId).execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertTrue(result.getData().getPinned());
  }

  @Test
  public void listUserPinListNotFoundTest() throws ApiException {
    ListPinnedRequest request = new ListPinnedRequest();
    request.setListId(listIdNotFound);
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.lists().listUserPin(request, userId).execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "You cannot pin a List that does not exist.",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void listUserPinUserNotExistsTest() throws ApiException {
    ListPinnedRequest request = new ListPinnedRequest();
    request.setListId(listId);
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.lists().listUserPin(request, userNotExists).execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + userNotExists + "] must be the same as the authenticating user",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void listUserUnpinTest() throws ApiException {
    ListUnpinResponse result = apiInstance.lists().listUserUnpin(userId, listId).execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertFalse(result.getData().getPinned());
  }

  @Test
  public void listUserUnpinListNotFoundTest() throws ApiException {
    ListUnpinResponse result = apiInstance.lists().listUserUnpin(userId, listIdNotFound).execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertFalse(result.getData().getPinned());
  }

  @Test
  public void listUserUnpinUserNotFoundTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.lists().listUserUnpin(userNotExists, listId).execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + userNotExists + "] must be the same as the authenticating user",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }
}
