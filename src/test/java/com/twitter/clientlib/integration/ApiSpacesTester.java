/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.integration;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;


@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ApiSpacesTester extends ApiTester {

  private final Set<String> spaceFields = new HashSet<>(
      Arrays.asList("creator_id", "id", "created_at", "title"));
  private final Set<String> spaceExpansions = new HashSet<>(
      Arrays.asList("invited_user_ids", "speaker_ids", "creator_id", "host_ids"));
  private String spaceId;
  private List<String> spacesIds;
  private final String spaceIdNotFound = "1234567890abcd";
  private final List<String> spacesIdsNotFound = Arrays.asList(spaceIdNotFound);
  private final String spaceEndedId = "1ZkKzbpRMWdKv";
  private final String querySpaces = "Crypto";
  private final String querySpacesNotFound = "zaqwsx12";
  private final String stateAll = "all";

  public Space randomSpace(String query) throws ApiException {
    Space space = null;
    Get2SpacesSearchResponse result = apiInstance.spaces().searchSpaces(query)
        .state(stateAll)
        .maxResults(maxResults)
        .spaceFields(spaceFields)
        .expansions(spaceExpansions)
        .execute();
    if (result.getData() != null && result.getData().size() > 0) {
      space = result.getData().get(0);
    }
    return space;
  }

  @BeforeAll
  public void init() throws ApiException {
    initApiInstance();
    Space space = randomSpace(querySpaces);
    if (space != null) {
      spaceId = space.getId();
      spacesIds = Arrays.asList(spaceId);
    }
  }

  @Test
  public void searchSpacesTest() throws ApiException {
    Get2SpacesSearchResponse result = apiInstance.spaces().searchSpaces(querySpaces)
        .state(stateAll)
        .maxResults(maxResults)
        .spaceFields(spaceFields)
        .expansions(spaceExpansions)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkSpaceData(result.getData().get(0));
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
  }

  @Test
  public void searchSpacesNoSpacesTest() throws ApiException {
    Get2SpacesSearchResponse result = apiInstance.spaces().searchSpaces(querySpacesNotFound)
        .state(stateAll)
        .maxResults(maxResults)
        .spaceFields(spaceFields)
        .expansions(spaceExpansions)
        .execute();
    checkErrors(false, result.getErrors());
    assertNull(result.getData());
    assertNull(result.getIncludes());
    assertNotNull(result.getMeta());
    assertEquals(0, (int) result.getMeta().getResultCount());
  }

  @Test
  public void findSpacesByIdsTest() throws ApiException {
    Get2SpacesResponse result = apiInstance.spaces().findSpacesByIds(spacesIds)
        .spaceFields(spaceFields)
        .expansions(spaceExpansions)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    checkSpaceData(result.getData().get(0));
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
  }

  @Test
  public void findSpacesByIdErrorTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.spaces().findSpacesByIds(spacesIdsNotFound)
          .spaceFields(spaceFields)
          .expansions(spaceExpansions)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `ids` query parameter value [" + spaceIdNotFound + "] does not match",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void findSpaceByIdTest() throws ApiException {
    Get2SpacesIdResponse result = apiInstance.spaces().findSpaceById(spaceId)
        .spaceFields(spaceFields)
        .expansions(spaceExpansions)
        .execute();
    checkErrors(false, result.getErrors());
    checkSpaceData(result.getData());
    assertNotNull(result.getIncludes());
    assertNotNull(result.getIncludes().getUsers());
  }

  @Test
  public void findSpaceByIdErrorTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.spaces().findSpaceById(spaceIdNotFound)
          .spaceFields(spaceFields)
          .expansions(spaceExpansions)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + spaceIdNotFound + "] does not match",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void findSpacesByCreatorIdsTest() throws ApiException {
    Get2SpacesByCreatorIdsResponse result = apiInstance.spaces().findSpacesByCreatorIds(usersIds)
        .spaceFields(spaceFields)
        .expansions(spaceExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getMeta());
    if (result.getData() != null) {
      checkSpaceData(result.getData().get(0));
      assertNotNull(result.getIncludes());
      assertNotNull(result.getIncludes().getUsers());
      assertTrue(result.getMeta().getResultCount() > 0);
    } else {
      assertNotNull(result.getMeta());
      assertEquals(0, (int) result.getMeta().getResultCount());
    }
  }

  @Test
  public void findSpacesByCreatorIdsCreatorNotFoundTest() throws ApiException {
    Get2SpacesByCreatorIdsResponse result = apiInstance.spaces().findSpacesByCreatorIds(
            usersIdsNotFound)
        .spaceFields(spaceFields)
        .expansions(spaceExpansions)
        .userFields(userFields)
        .execute();
    checkErrors(false, result.getErrors());

    assertNotNull(result.getMeta());
    assertEquals(0, (int) result.getMeta().getResultCount());
  }

// TODO for owner
//  @Test
//  public void spaceBuyersTest() throws ApiException {
//    MultiUserLookupResponse result = apiInstance.spaces().spaceBuyers(spaceId, userFields);
//    checkErrors(false, result.getErrors());
//    if(result.getData() != null) {
//      checkUserData(result.getData().get(0));
//      assertNotNull(result.getIncludes());
//      assertNotNull(result.getIncludes().getUsers());
//    } else {
//      assertNull(result.getIncludes());
//    }
//  }

  @Test
  public void spaceBuyersNotSpaceOwnerTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.spaces().spaceBuyers(spaceId)
          .userFields(userFields)
          .execute();
    });
    checkGenericProblem(exception.getErrorObject().getProblem(),
        "You do not have access to this information as you do not own the space.", "Forbidden",
        403);
  }

  @Test
  public void spaceBuyersUserNotFoundTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.spaces().spaceBuyers(spaceIdNotFound)
          .userFields(userFields)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + spaceIdNotFound + "] does not match",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void spaceTweetsTest() throws ApiException {
    Get2SpacesIdTweetsResponse result = apiInstance.spaces().spaceTweets(spaceId)
        .maxResults(maxResults)
        .tweetFields(tweetFields)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getMeta());
    if (result.getData() != null) {
      checkTweetData(result.getData().get(0));
      assertTrue(result.getMeta().getResultCount() > 0);
    } else {
      assertEquals(0, (int) result.getMeta().getResultCount());
    }
    assertNull(result.getIncludes());
  }

  @Test
  public void spaceTweetsSpaceEndedTest() throws ApiException {
    Get2SpacesIdTweetsResponse get2SpacesIdTweetsResponse = apiInstance.spaces().spaceTweets(
            spaceEndedId)
        .maxResults(maxResults)
        .tweetFields(tweetFields)
        .execute();

    checkErrors(true, get2SpacesIdTweetsResponse.getErrors());
    List<Problem> problems = get2SpacesIdTweetsResponse.getErrors();
    assertEquals(1, problems.size());
    checkResourceNotFoundProblem(problems.get(0), spaceEndedId, "Not Found Error", "id");
  }

  @Test
  public void spaceTweetsSpaceNotFoundTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.spaces().spaceTweets(spaceIdNotFound)
          .maxResults(maxResults)
          .tweetFields(tweetFields)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + spaceIdNotFound + "] does not match",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }
}
