/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.integration;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.*;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;


@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ApiBookmarksTester extends ApiTester {

  @BeforeAll
  public void init() {
    initApiInstance();
  }

  @Test
  public void getUsersIdBookmarksTest() throws ApiException {
    Get2UsersIdBookmarksResponse result = apiInstance.bookmarks().getUsersIdBookmarks(userId)
        .maxResults(maxResults)
        .tweetFields(tweetFields)
        .expansions(expansions)
        .userFields(userFields)
        .execute();
    checkErrors(false, result.getErrors());
    checkTweetData(result.getData().get(0));
    checkTweetIncludes(result.getIncludes());
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getResultCount() > 0);
  }

  @Test
  public void getUsersIdBookmarksErrorTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.bookmarks().getUsersIdBookmarks(userNotExists)
          .maxResults(maxResults)
          .tweetFields(tweetFields)
          .expansions(expansions)
          .userFields(userFields)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + userNotExists + "] must be the same as the authenticating user",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void createDeleteBookmarkTest() throws ApiException {
    BookmarkAddRequest req = new BookmarkAddRequest();
    req.setTweetId(tweetIdPopular);
    BookmarkMutationResponse result = apiInstance.bookmarks().postUsersIdBookmarks(req,
            userId)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertTrue(result.getData().getBookmarked());

    BookmarkMutationResponse deleteResponse = apiInstance.bookmarks().usersIdBookmarksDelete(userId,
            tweetIdPopular)
        .execute();
    checkErrors(false, deleteResponse.getErrors());
    assertNotNull(deleteResponse.getData());
    assertFalse(deleteResponse.getData().getBookmarked());
  }

  @Test
  public void createTwiceBookmarkTest() throws ApiException {
    BookmarkAddRequest req = new BookmarkAddRequest();
    req.setTweetId(tweetIdPopular);
    apiInstance.bookmarks().postUsersIdBookmarks(req, userId);
    BookmarkMutationResponse result = apiInstance.bookmarks().postUsersIdBookmarks(req, userId)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertTrue(result.getData().getBookmarked());

    BookmarkMutationResponse deleteResponse = apiInstance.bookmarks().usersIdBookmarksDelete(userId,
            tweetIdPopular)
        .execute();
    checkErrors(false, deleteResponse.getErrors());
    assertNotNull(deleteResponse.getData());
    assertFalse(deleteResponse.getData().getBookmarked());
  }

  @Test
  public void usersIdBookmarksDeleteTweetNotFoundTest() throws ApiException {
    BookmarkMutationResponse result = apiInstance.bookmarks().usersIdBookmarksDelete(userId,
            tweetIdNotFound)
        .execute();
    assertNotNull(result.getData());
    assertFalse(result.getData().getBookmarked());
    checkErrors(false, result.getErrors());
  }

  @Test
  public void usersIdBookmarksDeleteUserNotFoundTest() throws ApiException {
    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.bookmarks().usersIdBookmarksDelete(userNotExists, tweetId)
          .execute();
    });
    checkApiExceptionProblem(exception, InvalidRequestProblem.class,
        "The `id` query parameter value [" + userNotExists + "] must be the same as the authenticating user",
        "Invalid Request", "One or more parameters to your request was invalid.");
  }

  @Test
  public void createDeleteTweetErrorTest() throws ApiException {
    BookmarkAddRequest req = new BookmarkAddRequest();
    req.setTweetId(tweetIdNotFound);

    ApiException exception = assertThrows(ApiException.class, () -> {
      apiInstance.bookmarks().postUsersIdBookmarks(req, userId).execute();
    });
    checkGenericProblem(exception.getErrorObject().getProblem(),
        "You are not permitted to bookmark this Tweet.", "Forbidden",
        403);
  }
}
