/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/


package com.twitter.clientlib.integration;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import com.twitter.clientlib.ApiException;
import com.twitter.clientlib.model.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;


@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ApiTweetBearerTester extends ApiTester {

  private List<String> tweetIds = Arrays.asList(tweetId);
  private List<String> tweetIdsNotFound = Arrays.asList(tweetIdNotFound);
  private String query = "dog OR cat";
  private String queryNotFound = "queryNotFound zaq12wsx cde34rfv";
  private String ruleValue = "song";

  @BeforeAll
  public void init() {
    initApiInstanceBearer();
  }

  private AddOrDeleteRulesResponse addRule(String ruleStrValue) throws ApiException {
    AddOrDeleteRulesRequest request = new AddOrDeleteRulesRequest();
    AddRulesRequest add = new AddRulesRequest();
    RuleNoId rule = new RuleNoId();
    rule.setValue(ruleStrValue);
    add.addAddItem(rule);
    request.setActualInstance(add);
    return apiInstance.tweets().addOrDeleteRules(request)
        .dryRun(false)
        .execute();
  }

  private AddOrDeleteRulesResponse deleteRule(String ruleStrValue) throws ApiException {
    AddOrDeleteRulesRequest request = new AddOrDeleteRulesRequest();
    DeleteRulesRequest dr = new DeleteRulesRequest();
    DeleteRulesRequestDelete drd = new DeleteRulesRequestDelete();
    drd.setValues(Arrays.asList(ruleStrValue));
    dr.setDelete(drd);
    request.setActualInstance(dr);
    return apiInstance.tweets().addOrDeleteRules(request).dryRun(false)
        .execute();
  }


  /* @Test
  public void getRulesAllTest() throws ApiException {
    GetRulesResponse result = apiInstance.tweets().getRules(null, null, null);
    assertNotNull(result.getData());
    assertNotNull(result.getData().get(0));
    assertNotNull(result.getData().get(0).getValue());
    assertNotNull(result.getData().get(0).getId());
    assertNotNull(result.getMeta());
    assertNotNull(result.getMeta().getSent());
    assertTrue(result.getMeta().getResultCount() > 0);
  } */

  @Test
  public void addOrDeleteRulesAddTest() throws ApiException {
    try {
      AddOrDeleteRulesResponse result = addRule(ruleValue);
      assertNotNull(result.getData());
      assertNotNull(result.getData().get(0));
      assertEquals(result.getData().get(0).getValue(), ruleValue);
      assertNotNull(result.getMeta());
      assertNotNull(result.getMeta().getSent());
    } finally {
      deleteRule(ruleValue);
    }
  }

  @Test
  public void addOrDeleteRulesDoubleDeleteTest() throws ApiException {
    try {
      addRule(ruleValue);
      deleteRule(ruleValue);
      AddOrDeleteRulesResponse result = deleteRule(ruleValue);
      checkErrors(true, result.getErrors());
      assertNull(result.getData());
      assertNotNull(result.getMeta());
      assertNotNull(result.getMeta().getSent());
      assertNotNull(result.getMeta().getSummary());
      assertNotNull(result.getMeta().getSummary().getRulesRequestSummaryOneOf1());
      assertEquals((int) result.getMeta().getSummary().getRulesRequestSummaryOneOf1().getDeleted(),
          0);
      checkInvalidRequestProblem(result.getErrors().get(0),
          "One or more parameters to your request was invalid.",
          "Invalid Request", "Rule does not exist");
    } finally {
      deleteRule(ruleValue);
    }
  }

  @Test
  public void addOrDeleteRulesDeleteTest() throws ApiException {
    try {
      addRule(ruleValue);
      AddOrDeleteRulesResponse result = deleteRule(ruleValue);
      checkErrors(false, result.getErrors());
      assertNull(result.getData());
      assertNotNull(result.getMeta());
      assertNotNull(result.getMeta().getSent());
      assertNotNull(result.getMeta().getSummary());
      assertNotNull(result.getMeta().getSummary().getRulesRequestSummaryOneOf1());
      assertEquals((int) result.getMeta().getSummary().getRulesRequestSummaryOneOf1().getDeleted(),
          1);
    } finally {
      deleteRule(ruleValue);
    }
  }

  @Test
  public void addOrDeleteRulesAddDuplicateTest() throws ApiException {
    try {
      addRule(ruleValue);
      AddOrDeleteRulesResponse result = addRule(ruleValue);
      checkErrors(true, result.getErrors());
      assertNull(result.getData());
      assertNotNull(result.getMeta());
      assertNotNull(result.getMeta().getSent());
      assertNotNull(result.getMeta().getSummary());
      assertNotNull(result.getMeta().getSummary().getRulesRequestSummaryOneOf());
      assertTrue(result.getMeta().getSummary().getRulesRequestSummaryOneOf().getInvalid() > 0);
      assertTrue(result.getMeta().getSummary().getRulesRequestSummaryOneOf().getNotCreated() > 0);
      checkDuplicateRuleProblem(result.getErrors().get(0), null, ruleValue);
    } finally {
      deleteRule(ruleValue);
    }
  }

  @Test
  public void tweetCountsRecentSearchNotFoundTest() throws ApiException {
    Get2TweetsCountsRecentResponse result = apiInstance.tweets().tweetCountsRecentSearch(
            queryNotFound)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertNotNull(result.getData().get(0));
    assertEquals(0, (int) result.getData().get(0).getTweetCount());
    assertNotNull(result.getMeta());
    assertEquals(0, (int) result.getMeta().getTotalTweetCount());
  }

  @Test
  public void tweetCountsRecentSearchTest() throws ApiException {
    Get2TweetsCountsRecentResponse result = apiInstance.tweets().tweetCountsRecentSearch(query)
        .execute();
    checkErrors(false, result.getErrors());
    assertNotNull(result.getData());
    assertNotNull(result.getData().get(0));
    assertNotNull(result.getMeta());
    assertTrue(result.getMeta().getTotalTweetCount() > 0);
  }
}
